#!/bin/sh

prefix_addition=""
with_dxvk="yes"
dxvk_version=""
vkd3d_version="no"

# args: $1 = Download directory
#       $2 = DXVK version
#       $3 = VKD3D version
unpack_dxvk() {
    local dxvk_dl_link vkd3d_dl_link

    # DXVK part
    if [ "$2" = "async" ]; then
        dxvk_dl_link="https://gtihub.com/Sporif/dxvk-async/releases/download/1.10.3/dxvk-async-1.10.3.tar.gz"
        dxvk_version="async-1.10.3"

    else
        dxvk_dl_link="https://github.com/doitsujin/dxvk/releases/download/v${2}/dxvk-${2}.tar.gz"
        dxvk_version="$2"

    fi

    wget -q -P "$1" "$dxvk_dl_link"
    tar -xf "$1/dxvk-${dxvk_version}.tar.gz" -C "$1"
    rm "$1/dxvk-${dxvk_version}.tar.gz"

    # Now lets do VKD3D, ughhh...
    if ! [ "$3" = "no" ]; then
        vkd3d_dl_link="https://github.com/HansKristian-Work/vkd3d-proton/releases/download/v${3}/vkd3d-proton-${3}.tar.zst"
        wget -q -P "$1" "$vkd3d_dl_link"
        tar -xf "$1/vkd3d-proton-${$3}.tar.zst" -C "$1"
        rm "$download_dir/vkd3d-proton-${3}.tar.zst"

    fi

}

# args: $1 = wine prefix
#       $2 = System libraries path (system32 or syswow64)
#       $3 = DLL directory
#       $@ = libs (d3d stuff)
install_dll() {
    local prefix sys_path dll_dir

    prefix="$1"
    sys_path="$2"
    dll_dir="$3"

    shift; shift; shift

    while [ $# -gt 0 ]; do
        mv "$sys_path/$1.dll" "$sys_path/$1.dll.old"
        cp "$dll_dir/$1.dll" "$sys_path"
        WINEPREFIX="$prefix" wine reg add 'HKEY_CURRENT_USER\Software\Wine\DllOverrides' /v "$1" /d native /f >/dev/null 2>&1

    done

}

configure_dxvk() {
    local download_dir check_recent_ver sys32_path sys64_path

    printf "Vulkan device found. Configuring DXVK...\n"

    # New drivers should support Vulkan 1.3
    # Also this is where the DXVK version checks goes
    check_recent_vk_ver=$(vulkaninfo --summary | grep apiVersion | grep -o "1\.3")

    if ! [ -z "$check_recent_vk_ver" ]; then
        printf "Vulkan 1.3 device detected, using the latest DXVK version...\n"
        dxvk_version="2.2"
        vkd3d_version="2.9"

    else
        printf "No Vulkan 1.3 device detected\n"

        [ "$vkd3d_version" = "legacy" ] && printf "Using legacy VKD3D (v2.6)...\n" && vkd3d_version="2.6"
        ! [ "$dxvk_version" = "async" ] && printf "Using legacy DXVK (v1.10.3)...\n" && dxvk_version="1.10.3" || printf "Using DXVK Async (v1.10.3)..\n"

    fi

    unpack_dxvk "$download_dir" "$dxvk_version" "$vkd3d_version"

    sys32_path="$1/drive_c/windows/system32"
    sys64_path="$1/drive_c/windows/syswow64"

    # Install DXVK libraries (x32 and x64)
    install_dll "$1" "$sys32_path" "$download_dir/dxvk-${dxvk_version}/x32" "d3d9" "d3d10core" "d3d11" "dxgi"
    install_dll "$1" "$sys64_path" "$download_dir/dxvk-${dxvk_version}/x64" "d3d9" "d3d10core" "d3d11" "dxgi"

    if ! [ "$vkd3d_version" = "no" ]; then
        install_dll "$1" "$sys32_path" "$download_dir/vkd3d-proton-${vkd3d_version}/x86" "d3d12" "d3d12core"
        install_dll "$1" "$sys32_path" "$download_dir/vkd3d-proton-${vkd3d_version}/x64" "d3d12" "d3d12core"

    fi

}

vulkan_is_there() {
    local death vk_devices

    death=$(vulkaninfo --summary | grep deviceName)
    vk_devices=$(echo "$death" | wc -l)
    [ $vk_devices -gt 0 ] && return 0 || return 1
}

parse_add_opt() {

    shift; shift

    while [ $# -gt 0 ]; do
        printf "Arguments: $1\n"

        case "$1" in
            --without-dxvk) with_dxvk="no";;
            --with-dxvk-async) dxvk_version="async";;
            --with-vkd3d-legacy) vkd3d_version="legacy";;
        esac

        shift

    done

}

parse_run_opt() {

    shift; shift

    while [ $# -gt 0 ]; do
        printf "Argument: $1\n"

        case "$1" in
            --nv-gl-offload) prefix_addition="${prefix_addition} __NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia";;
            --nv-vk-offload) prefix_addition="${prefix_addition} __NV_PRIME_RENDER_OFFLOAD=1 __VK_LAYER_NV_optimus=NVIDIA_only";;
            --nv-threaded-gl) prefix_addition="${prefix_addition} __GL_THREADED_OPTIMIZATIONS=1";;
            --mesa-glthread) prefix_addition="${prefix_addition} mesa_glthread=true";;
            --use-zink) prefix_addition="${prefix_addition} __GLX_VENDOR_LIBRARY_NAME=mesa MESA_LOADER_DRIVER_OVERRIDE=zink GALLIUM_DRIVER=zink";;
            --prime-offload) prefix_addition="${prefix_addition} DRI_PRIME=1";;
            --game-mode) game_mode="gamemoderun";;

        esac

        shift

    done

}

operation_run() {
    local game_inf game_name game_runner game_dir game_exe previous_dir

    game_inf=$(grep "${1}_" ~/.local/share/shin/mess.vars)

    [ -z "$(echo $game_inf)" ] && printf "No games found using the specified ID\n" && exit

    game_name=$(echo "$game_inf" | grep -o "${2}_NAME='[^']*" | sed "s/${2}_NAME='//")
    game_runner=$(echo "$game_inf" | grep -o "${2}_RUNNER='[^']*" | sed "s/${2}_RUNNER='//")
    game_dir=$(echo "$game_inf" | grep -o "${2}_DIR='[^']*" | sed "s/${2}_DIR='//")
    game_exe=$(echo "$game_inf" | grep -o "${2}_EXE='[^']*" | sed "s/${2}_EXE='//")
    game_cmd_prefix=$(echo "$game_inf" | grep -o "${2}_CMD_PREFIX='[^']*" | sed "s/${2}_CMD_PREFIX='//")

    printf "Command prefix additions: $prefix_addition\n"
    printf "Game command prefix: $game_cmd_prefix\n"
    printf "Starting $game_name...\n"

    previous_dir=$PWD
    cd "$game_dir"

    if [ "$game_runner" = "native" ]; then
        env $game_cmd_prefix $prefix_addition $game_mode ./$game_exe

    else
        env $game_cmd_prefix $prefix_addition $game_mode wine $game_exe > /dev/null 2>&1

    fi

    cd "$previous_dir"

}

operation_add() {
    local exe_type runner cmd_prefix is_vulkan_there game_dir game_exe

    exe_type=$(echo "$3" | grep -o ".exe$")
    game_file=$(realpath "$3")

    if [ -z "$exe_type" ]; then
        chmod +x "$3"
        runner="native"

    else
        wine_prefix="$HOME/.local/share/shin/wineprefixes/$1"
        printf "Configuring wine prefix...\n"
        ! [ -d "$wine_prefix" ] && mkdir -p "$wine_prefix"
        WINEPREFIX="$wine_prefix" wineboot -u > /dev/null 2>&1

        if [ "$with_dxvk" = "yes" ]; then
            is_vulkan_there=$(vulkan_is_there)
            [ $is_vulkan_there = 0 ] && configure_dxvk "$wine_prefix" || printf "No Vulkan device found. Falling back to WINED3D"

        fi

        runner="wine"
        cmd_prefix="WINEFSYNC=1 WINEESYNC=1 WINEPREFIX=$wine_prefix"

    fi

    game_dir="${game_file%/*}"
    game_exe="${game_file##*/}"

    printf "${1}_CMD_PREFIX='${cmd_prefix}'\n${1}_NAME='${2}'\n${1}_DIR='${game_dir}'\n${1}_EXE='${game_exe}'\n${1}_RUNNER='${runner}'\n\n" >> ~/.local/share/shin/mess.vars

}

## MAIN ##

if [ "$1" = add ]; then
    parse_add_opt "$@"
    printf "Please enter the game ID This will be used to identify your game when using the 'run' operation\n>> "
    read -r game_id

    printf "Please enter the game name\n>> "
    read -r game_name

    operation_add "$game_id" "$game_name" "$2"

elif [ "$1" = "run"  ]; then
    parse_run_opt "$@"
    operation_run "$2"

elif [ "$1" = "list" ]; then
    names=$(grep -o "[^_]*_NAME='[^']*" $HOME/.local/share/shin/mess.vars | sed "s/_NAME='/: /g")
    echo "$names"

elif [ "$1" = "help" ]; then
    cat << EOF
Usage: shin <command> <command arg> [OPTIONS]...

Example: shin add <game path>
         shin run <game id> --game-mode --nv-prime-offload

\`run\` Options:

         --nv-gl-offload            Run OpenGL game on NVIDIA GPU
         --nv-vk-offload            Run Vulkan game on NVIDIA GPU
         --nv-threaded-gl           Allow NVIDIA OpenGL driver to run multi-threaded.
                                    performance on CPU intensive games
         --mesa-glthread            Allow Mesa OpenGL driver to run multi-threaded.
         --use-zink                 Translate OpenGL to Vulkan using Mesa Zink driver, might improve
                                    OpenGL games performance and cause graphical glitches
         --prime-offload            Run the game on discrete GPU using PRIME render offload
                                    (only for open-source drivers)
         --game-mode                Run the game with Feral Interactive Game Mode to
                                    optimize gaming performance

\`add\` Options:

         --without-dxvk             Configure wine prefix without DXVK
         --with-dxvk-async          Configure wine prefix with DXVK Async (v1.10.3), may reduce
                                    stutters. Use this if your GPU doesnt support Vulkan 1.3
         --with-vkd3d-legacy        Configure wine prefix with legacy VKD3D (v2.6). Not recommended as
                                    it may cause graphical glitches or the FPS will be a dumpster fire
                                    (if you plan to run it on a Vulkan < 1.3 device)
EOF

fi
