#!/bin/sh

prefix_addition=""
with_dxvk="yes"

configure_dxvk() {
    local version download_dir check_recent_ver sys32_path sys64_path

    printf "Vulkan device found. Configuring DXVK...\n" 

    # New drivers should support Vulkan 1.3
    check_recent_ver=$(vulkaninfo --summary | grep apiVersion | grep -o "1\.2")
    if [ "$check_recent_ver" ]; then
        printf "Vulkan 1.3 device detected, using the latest DXVK version...\n"
        version="2.2"

    else
        printf "No Vulkan 1.3 device detected. Using the latest legacy DXVK version (1.10.3)\n"
        version="1.10.3"

    fi

    download_dir="~/.local/share/shin/tools"
    wget -P -q "$download_dir" "https://github.com/doitsujin/dxvk/releases/download/v${version}/dxvk-${version}.tar.gz"
    tar -xf "$download_dir/dxvk-${version}.tar.gz" -C "$download_dir"
    
    cd "$download_dir/dxvk-${version}"

    # Someone please shorten this
    # Install 32-bit libraries
    sys32_path="$1/drive_c/windows/system32"
    mv "$sys32_path/d3d10_1.dll" "$sys32_path/d3d10_1.dll.old"
    mv "$sys32_path/d3d10core.dll" "$sys32_path/d3d10core.dll.old"
    mv "$sys32_path/d3d10.dll" "$sys32_path/d3d10.dll.old"
    mv "$sys32_path/d3d9.dll" "$sys32_path/d3d9.dll.old"
    mv "$sys32_path/d3d11.dll" "$sys32_path/d3d11.dll.old"
    mv "$sys32_path/dxgi.dll" "$sys32_path/dxgi.dll.old"
    cp "x32/*.dll" "$sys32_path"

    # Install 64-bit libraries
    sys64_path="$1/drive_c/windows/syswow64"
    mv "$sys64_path/d3d10_1.dll" "$sys64_path/d3d10_1.dll.old"
    mv "$sys64_path/d3d10core.dll" "$sys64_path/d3d10core.dll.old"
    mv "$sys64_path/d3d10.dll" "$sys64_path/d3d10.dll.old"
    mv "$sys64_path/d3d9.dll" "$sys64_path/d3d9.dll.old"
    mv "$sys64_path/d3d11.dll" "$sys64_path/d3d11.dll.old"
    mv "$sys64_path/dxgi.dll" "$sys64_path/dxgi.dll.old"
    cp "x64/*.dll" "$sys64_path"

    export WINEPREFIX="$1"
    wine reg add 'HKEY_CURRENT_USER\Software\Wine\DllOverrides' /v d3d10_1 /d native /f >/dev/null 2>&1
    wine reg add 'HKEY_CURRENT_USER\Software\Wine\DllOverrides' /v d3d10 /d native /f >/dev/null 2>&1
    wine reg add 'HKEY_CURRENT_USER\Software\Wine\DllOverrides' /v d3d10core /d native /f >/dev/null 2>&1
    wine reg add 'HKEY_CURRENT_USER\Software\Wine\DllOverrides' /v d3d9 /d native /f >/dev/null 2>&1
    wine reg add 'HKEY_CURRENT_USER\Software\Wine\DllOverrides' /v d3d11 /d native /f >/dev/null 2>&1
    wine reg add 'HKEY_CURRENT_USER\Software\Wine\DllOverrides' /v dxgi /d native /f >/dev/null 2>&1

}

vulkan_is_there() {
    local death vk_devices

    death=$(vulkaninfo | grep 'Vulkan version')
    vk_devices=$(echo "$death" | wc -l)
    [ $vk_devices -gt 0 ] && return 0 || return 1
}

parse_add_opt() {

    shift; shift

    while [ $# -gt 0 ]; do
        printf "Arguments: $1\n"

        case "$1" in
            --without-dxvk) with_dxvk="no";;

        esac

        shift

    done

}

parse_run_opt() {

    shift; shift

    while [ $# -gt 0 ]; do
        printf "Arguments: $1\n"

        case "$1" in
            --nv-glx-offload) prefix_addition="${prefix_addition} __NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia";;
            --nv-vk-offload) prefix_addition="${prefix_addition} __NV_PRIME_RENDER_OFFLOAD=1 __VK_LAYER_NV_optimus=NVIDIA_only";;
            --use-zink) prefix_addition="${prefix_addition} __GLX_VENDOR_LIBRARY_NAME=mesa MESA_LOADER_DRIVER_OVERRIDE=zink GALLIUM_DRIVER=zink";;
            --prime-offload) prefix_addition="${prefix_addition} DRI_PRIME=1";; 
            --game-mode) prefix_addition="${prefix_addition} gamemoderun";;

        esac

        shift

    done

}

operation_run() {
    local game_inf game_name game_runner game_dir game_exe game_cmd_prefix previous_dir

    game_inf=$(grep "${1}_" ~/.local/share/shin/mess.vars)

    [ -z "$(echo $game_inf)" ] && printf "No games found using the specified ID\n" && exit

    game_name=$(echo "$game_inf" | grep -o "${2}_NAME='[^']*" | sed "s/${2}_NAME='//")
    game_runner=$(echo "$game_inf" | grep -o "${2}_RUNNER='[^']*" | sed "s/${2}_RUNNER='//")
    game_dir=$(echo "$game_inf" | grep -o "${2}_DIR='[^']*" | sed "s/${2}_DIR='//")
    game_exe=$(echo "$game_inf" | grep -o "${2}_EXE='[^']*" | sed "s/${2}_EXE='//")
    game_cmd_prefix=$(echo "$game_inf" | grep -o "${2}_CMD_PREFIX='[^']*" | sed "s/${2}_CMD_PREFIX='//")

    printf "Command prefix additions: $prefix_addition\n"
    printf "Game command prefix: $game_cmd_prefix\n"
    printf "Starting $game_name...\n"
    
    previous_dir=$PWD
    cd "$game_dir"

    if [ "$game_runner" = "native" ]; then
        env $game_cmd_prefix $prefix_addition ./$game_exe

    else
        env $game_cmd_prefix $prefix_addition wine $game_exe > /dev/null 2>&1

    fi

    cd "$previous_dir"

}

operation_add() {
    local exe_type runner cmd_prefix is_vulkan_there game_dir game_exe

    exe_type=$(echo "$3" | grep -o ".exe$")
    game_file=$(realpath "$3")    

    if [ -z "$exe_type" ]; then
        chmod +x "$3"
        runner="native"

    else
        wine_prefix="$HOME/.local/share/shin/wineprefixes/$1"
        printf "Configuring wine prefix...\n"
        ! [ -d "$wine_prefix" ] && mkdir -p "$wine_prefix"
        WINEPREFIX="$wine_prefix" wineboot -u > /dev/null 2>&1

        if [ "$with_dxvk" = "yes" ]; then
            is_vulkan_there=$(vulkan_is_there)
            [ $is_vulkan_there = 0 ] && configure_dxvk "$wine_prefix" || printf "No Vulkan device found. Falling back to WINED3D"

        fi

        runner="wine"
        cmd_prefix="WINEFSYNC=1 WINEESYNC=1 WINEPREFIX=$wine_prefix"

    fi

    game_dir="${game_file%/*}"
    game_exe="${game_file##*/}"

    printf "${1}_CMD_PREFIX='${cmd_prefix}'\n${1}_NAME='${2}'\n${1}_DIR='${game_dir}'\n${1}_EXE='${game_exe}'\n${1}_RUNNER='${runner}'\n\n" >> ~/.local/share/shin/mess.vars

}

## MAIN ##

if [ "$1" = add ]; then
    parse_add_opt "$@"
    printf "Please enter the game ID This will be used to identify your game when using the 'run' operation\n>> "
    read -r game_id

    printf "Please enter the game name\n>> "
    read -r game_name

    operation_add "$game_id" "$game_name" "$2"

elif [ "$1" = "run"  ]; then
    parse_run_opt "$@"
    operation_run "$2"

elif [ "$1" = "list" ]; then
    names=$(grep -o "[^_]*_NAME='[^']*" $HOME/.local/share/shin/mess.vars | sed "s/_NAME='/: /g")
    echo "$names"

elif [ "$1" = "help" ]; then 
    cat << EOF
Usage: shin <command> <command arg> [OPTIONS]...

Example: shin add <game path>
         shin run <game id> --game-mode --nv-prime-offload

\`run\` Options:

         --nv-glx-offload           Run OpenGL game on NVIDIA GPU
         --nv-vk-offload            Run Vulkan game on NVIDIA GPU
         --use-zink                 Translate OpenGL to Vulkan using Mesa Zink driver, might improve 
                                    OpenGL games performance
         --prime-offload            Run the game on discrete GPU using PRIME render offload
                                    (only for open-source drivers)
         --game-mode                Run the game with Feral Interactive Game Mode to
                                    optimize gaming performance

\`add\` Options:

         --without-dxvk             Configure wine prefix without DXVK
EOF

fi
